@inherits HomeBallsEntriesCellComponentBase<IHomeBallsEntryBodyCell>

@if (Cell.IsLegal.Value)
{
    <center class="w-8 min-h-[24px] h-full" onmouseover="@OnMouseOver" onmouseout="@OnMouseOut">
        @BallFragment
    </center>
}

else
{
    <center class="w-8 min-h-[24px] h-full bg-theme-primary-100" onmouseover="@OnMouseOver" onmouseout="@OnMouseOut">
        @BallFragment
    </center>
}

@code
{
    protected internal override RenderFragment BallFragment => __builder =>
    {
        @if (Cell.IsObtained.Value && (Cell.IsLegal.Value || Settings.EntryTable.IsShowingIllegalEntries.Value))
        {
            <HomeBallsEntriesBallSprite Ball="@Ball" />
        }
    };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Cell.IsLegal.ValueChanged += OnCellValueChanged;
        Cell.IsLegalWithHiddenAbility.ValueChanged += OnCellValueChanged;
        Cell.IsObtained.ValueChanged += OnCellValueChanged;
        Cell.IsObtainedWithHiddenAbility.ValueChanged += OnCellValueChanged;
        Settings.EntryTable.IsShowingIllegalEntries.ValueChanged += OnCellValueChanged;
    }

    protected virtual void OnCellValueChanged(
        Object? sender,
        PropertyChangedEventArgs<Boolean> e) =>
        StateHasChanged();

    protected virtual void OnMouseOver(MouseEventArgs e) =>
        State.HoveredBallId.Value = Cell.Id.BallId;

    protected virtual void OnMouseOut(MouseEventArgs e)
    {
        if (State.HoveredBallId.Value == Cell.Id.BallId)
            State.HoveredBallId.Value = default(UInt16?);
    }
}