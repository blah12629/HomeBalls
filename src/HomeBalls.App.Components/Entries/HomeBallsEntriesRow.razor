@inherits HomeBallsEntriesRowComponentBase<IHomeBallsEntryBodyRow, IHomeBallsEntryBodyCell>
@inject IHomeBallsBreedablesSpriteService Sprites

<tr class="group">
    <HomeBallsEntriesCell>
        <Container>
            <td id="@context.ContainerId" class="sticky left-0 z-10 min-h-[29px] h-[29px] bg-theme-white-500 group-hover:bg-theme-primary-100"></td>
        </Container>
    </HomeBallsEntriesCell>

    <HomeBallsEntriesCell
        OnInitializedTask="@(rerenderAction => OnRowIdentifierInitializedAsync(rerenderAction, RowIdentifierSettings.IsShowingNumber))">
        <Container>
            @if (RowIdentifierSettings.IsUsingDefault.Value || RowIdentifierSettings.IsShowingNumber.Value)
            {
                <td id="@context.ContainerId" class="sticky left-[9px] z-10 bg-theme-white-500 px-1 py-0 whitespace-nowrap group-hover:bg-theme-primary-100">
                    @context.Content
                </td>
            }

            else { @context.HiddenContainer }
        </Container>
        <Content>
            <span class="font-semibold tabular-nums">@Row.Id.SpeciesId.ToString().PadLeft(3, '0')</span>
        </Content>
    </HomeBallsEntriesCell>

    <HomeBallsEntriesCell
        OnAfterRenderTask="@(id => OnCellRenderedAsync(id, "registerRowSpriteId"))"
        OnInitializedTask="@(rerenderAction => OnRowIdentifierInitializedAsync(rerenderAction, RowIdentifierSettings.IsShowingSprite))">
        <Container>
            @if (RowIdentifierSettings.IsUsingDefault.Value)
            {
                <td id="@context.ContainerId" class="sticky z-20 min-w-[0px] max-w-[0px] w-[0px] bg-theme-white-500 p-0 group-hover:bg-theme-primary-100 md:min-w-[68px] md:max-w-[68px] md:w-[68px]">
                    @context.Content
                </td>
            }

            else if (RowIdentifierSettings.IsShowingSprite.Value)
            {
                <td id="@context.ContainerId" class="sticky z-20 min-w-[68px] max-w-[68px] w-[68px] bg-theme-white-500 p-0 group-hover:bg-theme-primary-100">
                    @context.Content
                </td>
            }

            else { @context.HiddenContainer }
        </Container>
        <Content>
            @if (RowIdentifierSettings.IsUsingDefault.Value)
            {
                <center>
                    <img src="@SpriteUrl" class="hidden object-contain scale-[.8] md:inline-block" />
                </center>
            }

            else if (RowIdentifierSettings.IsShowingSprite.Value)
            {
                <center>
                    <img src="@SpriteUrl" class="object-contain scale-[.8]" />
                </center>
            }
        </Content>
    </HomeBallsEntriesCell>

    <HomeBallsEntriesCell
        OnAfterRenderTask="@(id => OnCellRenderedAsync(id, "registerRowNameId"))"
        OnInitializedTask="@(rerenderAction => OnRowIdentifierInitializedAsync(rerenderAction, RowIdentifierSettings.IsShowingName))">
        <Container>
            @if (RowIdentifierSettings.IsUsingDefault.Value || RowIdentifierSettings.IsShowingName.Value)
            {
                <td id="@context.ContainerId" class="sticky z-30 bg-theme-white-500 px-1 py-0 whitespace-nowrap group-hover:bg-theme-primary-100">
                    @context.Content
                </td>
            }

            else { @context.HiddenContainer }
        </Container>
        <Content>
            <HomeBallsEntriesRowName Form="@Form" />
        </Content>
    </HomeBallsEntriesCell>

    @foreach (var cell in Row)
    {
        <HomeBallsEntriesCell
            OnInitializedTask="@(rerenderAction => OnBallCellInitializedAsync(rerenderAction, cell))">
            <Container>
                @if (!IsBallCellShown(cell)) { @context.HiddenContainer }

                else if (cell.IsLegal.Value)
                {
                    <td onmouseover="@((MouseEventArgs e) => OnBallCellMouseOver(e, cell.Id.BallId))"
                        onmouseout="@((MouseEventArgs e) => OnBallCellMouseOut(e, cell.Id.BallId))"
                        id="@context.ContainerId"
                        class="cursor-pointer w-9 bg-theme-white-500 px-1 py-0">
                        @context.Content
                    </td>
                }

                else
                {
                    <td onmouseover="@((MouseEventArgs e) => OnBallCellMouseOver(e, cell.Id.BallId))"
                        onmouseout="@((MouseEventArgs e) => OnBallCellMouseOut(e, cell.Id.BallId))"
                        id="@context.ContainerId"
                        class="cursor-pointer w-9 bg-theme-primary-400 px-1 py-0">
                        @context.Content
                    </td>
                }
            </Container>
            <Content>
                @if (cell.IsObtained.Value &&
                    (cell.IsLegal.Value || EntriesSettings.IsShowingIllegalEntries.Value))
                {
                    <center>
                        <HomeBallsEntriesBallSprite BallId="@cell.Id.BallId" />
                    </center>
                }
            </Content>
        </HomeBallsEntriesCell>
    }

    <HomeBallsEntriesCell>
        <Container>
            <td id="@context.ContainerId" class="bg-theme-white-500"></td>
        </Container>
    </HomeBallsEntriesCell>
</tr>

@code
{
    Int32 _index;
    IHomeBallsEntryBodyRow? _row;
    IHomeBallsPokemonForm? _form;
    String? _spriteUrl;

    [Parameter, EditorRequired]
    public Int32 Index
    {
        get => _index;
        init
        {
            _index = value;
            _row = Table.Rows[Index];
            _form = Data.PokemonForms.IsLoaded ? Data.PokemonForms[Row.Id] :
                Data.BreedablePokemonForms.IsLoaded ? Data.BreedablePokemonForms[Row.Id] :
                throw new NullReferenceException();
            _spriteUrl = Sprites.GetSerebiiSpriteUri(Form).ToString();
        }
    }

    protected virtual IHomeBallsEntryBodyRow Row => _row ?? throw new NullReferenceException();

    protected virtual IHomeBallsPokemonForm Form => _form ?? throw new NullReferenceException();

    protected virtual String SpriteUrl => _spriteUrl ?? throw new NullReferenceException();

    protected override async Task OnAfterRenderAsync(Boolean firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await JSRuntime.InvokeVoidAsync("registerRowIndex", new Object?[] { Index });
    }

    protected override Task OnCellRenderedAsync(String containerId, String functionKey) =>
        JSRuntime.InvokeVoidAsync(functionKey, new Object[] { Index, containerId }).AsTask();

    protected override async Task OnBallCellInitializedAsync(
        Action rerenderAction,
        IHomeBallsEntryBodyCell cell)
    {
        await base.OnBallCellInitializedAsync(rerenderAction, cell);
        cell.IsLegal.ValueChanged += (sender, e) => rerenderAction();
        cell.IsLegalWithHiddenAbility.ValueChanged += (sender, e) => rerenderAction();
        cell.IsObtained.ValueChanged += (sender, e) => rerenderAction();
        cell.IsObtainedWithHiddenAbility.ValueChanged += (sender, e) => rerenderAction();
    }

    protected virtual Boolean IsBallCellShown(IHomeBallsEntryCell cell) =>
        (BallIdsSettings.IsUsingDefault.Value ? (IEnumerable<UInt16>)
            BallIdsSettings.DefaultValues :
            BallIdsSettings.Collection)
            .Contains(cell.Id);

    protected virtual void OnBallCellMouseOver(MouseEventArgs e, UInt16 ballId) =>
        State.HoveredBallId.Value = ballId;

    protected virtual void OnBallCellMouseOut(MouseEventArgs e, UInt16 ballId)
    {
        if (State.HoveredBallId.Value == ballId) State.HoveredBallId.Value = default(UInt16?);
    }
}