@inherits HomeBallsSettingsToggleBase

<div class="table-cell align-middle">
    <div class="w-5 h-5 overflow-hidden">
        @if (IsToggled.Value)
        {
            <button onclick="@OnToggleClick" title="@CheckboxTitle" class="w-5 h-5 overflow-hidden border-2 rounded-md group border-theme-primary-500 bg-theme-white-500 hover:bg-theme-primary-100 active:bg-theme-primary-100">
                <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 -ml-0.5 -mt-[1.5px] p-0.5 text-theme-primary-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7" />
                </svg>
            </button>
        }

        else
        {
            <button onclick="@OnToggleClick" title="@CheckboxTitle" class="w-5 h-5 overflow-hidden border-2 rounded-md group border-theme-black-100 bg-theme-white-500 hover:border-theme-black-200 hover:bg-theme-primary-100 active:border-theme-black-200 active:bg-theme-primary-100">
            </button>
        }
    </div>
</div>

@code
{
    IHomeBallsAppSettingsValueProperty<Boolean>? _isToggled;

    [Parameter, EditorRequired]
    public IHomeBallsAppSettingsValueProperty<Boolean> IsToggled
    {
        get => _isToggled ?? throw new NullReferenceException();
        init => _isToggled = value;
    }

    [Parameter]
    public String CheckboxTitle { get; init; } = "Use default";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        IsToggled.ValueChanged += OnToggleChanged;
    }

    protected virtual void OnToggleClick(MouseEventArgs e) => IsToggled.Value = !IsToggled.Value;

    protected virtual void OnToggleChanged(Object? sender, PropertyChangedEventArgs<Boolean> e) => StateHasChanged();
}