@* @inherits HomeBallsLoggingComponent
@inject IHomeBallsAppSettings Settings
@inject IHomeBallsBreedablesSpriteService Sprites

<button onclick="@OnToggleClicked" class="group m-0.5 w-6 h-6 overflow-hidden rounded-md bg-theme-white-500 hover:bg-theme-primary-100 active:bg-theme-primary-100 lg:w-7 lg:h-7">
    @if (!BallIds.IsUsingDefault.Value && IsSelected)
    {
        <img src="@SpriteUrl" class="inline-block object-contain w-6 h-6" />
    }

    else
    {
        <img src="@SpriteUrl" class="grayscale inline-block object-contain w-6 h-6 opacity-60 group-hover:opacity-100 group-active:opacity-100" />
    }
</button>

@code
{
    IHomeBallsItem? _ball;

    [Parameter, EditorRequired]
    public virtual IHomeBallsItem Ball
    {
        get => _ball ?? throw new NullReferenceException();
        init => _ball = value;
    }

    protected virtual IHomeBallsEntryBallIdsSettings BallIds => Settings.Entries.BallIds;

    protected virtual Boolean IsSelected => BallIds.Collection.Contains(Ball.Id);

    protected virtual Uri SpriteUrl => Sprites.GetBallSpriteUri(Ball);

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        BallIds.IsUsingDefault.ValueChanged += OnUsingDefaultChanged;
        BallIds.Collection.CollectionChanged += OnCollectionChanged;
    }

    protected virtual void OnToggleClicked(MouseEventArgs e)
    {
        if (IsSelected) BallIds.Collection.Remove(Ball.Id);
        else BallIds.Collection.Add(Ball.Id);
    }

    protected virtual void OnUsingDefaultChanged(
        Object? sender,
        PropertyChangedEventArgs<Boolean> e) =>
        StateHasChanged();

    protected virtual void OnCollectionChanged(
        Object? sender,
        NotifyCollectionChangedEventArgs e)
    {
        if ((e.OldItems?.Contains(Ball.Id) ?? false) ||
            (e.NewItems?.Contains(Ball.Id) ?? false))
            StateHasChanged();
    }
} *@