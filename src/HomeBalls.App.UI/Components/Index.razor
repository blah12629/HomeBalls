@page "/"
@inherits HomeBallsComponentBase
@inject IComparer<IHomeBallsItem> PokeballComparer
@inject IComparer<HomeBallsPokemonFormKey> PokemonFormKeyComparer
@inject IHomeBallsEntryColumnFactory ColumnFactory
@inject IHomeBallsEntryTable Table
@inject IHomeBallsLoadableDataSource Data
@inject IHomeBallsLocalStorageEntryCollection Entries
@inject IHomeBallsStateContainer State
@inject IHomeBallsSettings Settings

<EntryTable />

@code {
    protected virtual Int32 LoadingDelay => 50;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Data.DataLoaded += (sender, e) => Logger?.LogInformation(
            $"`{e.PropertyName}` loaded after {e.ElapsedTime}.");
    }

    protected override async Task OnAfterRenderAsync(Boolean firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        var balls = await EnsureSettingsBallsShownPopulated();
        await LoadTableDataAsync();
        await GenerateColumnsAsync(balls, false, false, 1);
        await EnsureLoadedAsync(Data.PokemonSpecies, "more Pokémon");
        State.LoadingMessage.Value = default;
    }

    protected virtual async Task EnsureLoadedAsync(
        IAsyncLoadable loadable,
        String dataName,
        CancellationToken cancellationToken = default)
    {
        State.LoadingMessage.Value = $"Loading {dataName} data...";
        await Task.Run(() => loadable.EnsureLoadedAsync(cancellationToken));
        await Task.Delay(LoadingDelay);
    }

    protected virtual async Task<IEnumerable<IHomeBallsItem>> EnsureSettingsBallsShownPopulated()
    {
        await EnsureLoadedAsync(Data.Items, "item");
        var balls = new List<IHomeBallsItem> { };
        var isSettingsEmpty = Settings.BallIdsShown.Count == 0;

        foreach(var ball in Data.Items
            .Where(item => item.Identifier.Contains("ball"))
            .OrderBy(item => item, PokeballComparer))
        {
            balls.Add(ball);
            if (isSettingsEmpty && isDefaultBall(ball))
                Settings.BallIdsShown.Add(ball.Id);
        }

        return balls;

        static Boolean isDefaultBall(IHomeBallsItem ball) =>
            ball.CategoryId == 39 || ball.Id == 5 || ball.Id > 456;
    }

    protected virtual async Task LoadTableDataAsync()
    {
        await EnsureLoadedAsync(Data.Items, "item");
        await EnsureLoadedAsync(Data.PokemonForms, "Pokémon");
        await EnsureLoadedAsync(Data.Legalities, "legality");
        await EnsureLoadedAsync(Entries, "entry");
    }

    protected virtual async Task GenerateColumnsAsync(
        IEnumerable<IHomeBallsItem> balls,
        Boolean isLegalitiesSorted = true,
        Boolean isEntriesSorted = true,
        Int32 delay = 1)
    {
        var start = DateTime.Now;
        State.LoadingMessage.Value = $"Generating table...";
        var legalities = ensureSorted(Data.Legalities, isLegalitiesSorted);
        var entries = ensureSorted(Entries, isEntriesSorted);
        var (i, j) = (0, 0);

        foreach (var column in ColumnFactory
            .UsingItems(balls, true, true)
            .UsingPokemonForms(Data.PokemonForms, false, false)
            .CreateColumns())
        {
            var key = column.Id;
            await doAsync(() => Table.Columns.Add(column));
            await doAsync(() => add(legalities, Table.Legalities, ref i, key));
            await doAsync(() => add(entries, Table.Entries, ref j, key));
        }

        Logger?.LogInformation(
            $"`{nameof(IHomeBallsEntryTable)}` generated after {DateTime.Now - start}.");

        async Task doAsync(Action action)
        {
            action.Invoke();
            await Task.Delay(1);
        }

        List<T> ensureSorted<T>(IEnumerable<T> items, Boolean isSorted)
            where T : notnull, IKeyed<HomeBallsEntryKey>
        {
            var list = new List<T> { };
            if (!isSorted) items = items.OrderBy(
                item => new HomeBallsPokemonFormKey(item.Id.SpeciesId, item.Id.FormId),
                PokemonFormKeyComparer);
            return items.ToList();
        }

        void add<T>(
            IList<T> items,
            IAddable<T> addable,
            ref Int32 index,
            HomeBallsPokemonFormKey key)
            where T : notnull, IKeyed<HomeBallsEntryKey>
        {
            for (; index < items.Count; index ++)
            {
                var item = items[index];
                var (species, form) = (item.Id.SpeciesId, item.Id.FormId);
                if (PokemonFormKeyComparer.Compare(toFormKey(item.Id), key) > 0) break;
                addable.Add(item);
            }
        }

        HomeBallsPokemonFormKey toFormKey(
            HomeBallsEntryKey key) =>
            new(key.SpeciesId, key.FormId);
    }
}