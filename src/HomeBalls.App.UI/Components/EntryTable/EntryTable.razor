@inherits HomeBallsComponentBase
@inject IHomeBallsLocalStorageDataSource Data
@inject IHomeBallsEntryTableFactory TableFactory

@if (Table == default)
{
    <Loading Size="@LoadingImageSize.GlobalLinkSmall">
        <Message>
            <span>@Message</span>
        </Message>
    </Loading>
}

else
{
    <table>
        <thead>
            <EntryHeader BallIds="@BallIds" />
        </thead>

        <tbody>
            <Virtualize Items="@Table.Columns" Context="column" TItem="@IHomeBallsEntryColumn">
                <EntryColumn Column="@column" />
            </Virtualize>
        </tbody>
    </table>
}

@code {
    String? _message = "Downloading data...";

    IHomeBallsEntryTable? Table { get; set; }

    String? Message
    {
        get => _message;
        set { _message = value; StateHasChanged(); }
    }

    IReadOnlyList<UInt16>? BallIds => Table?.Columns
        .FirstOrDefault()?
        .Select(cell => cell.BallId)?
        .ToList().AsReadOnly();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await SetTableAsync();
    }

    async Task SetTableAsync()
    {
        await Task.Delay(200);

        var downloadStart = DateTime.Now;
        await Data.EnsureLoadedAsync(data => data.Items);
        await Task.Delay(100);
        await Data.EnsureLoadedAsync(data => data.PokemonForms);
        await Task.Delay(100);
        await Data.EnsureLoadedAsync(data => data.PokemonSpecies);
        writeElapsed(downloadStart);
        await Task.Delay(100);

        Message = "Generating table...";
        var tableStart = DateTime.Now;
        Table = await TableFactory.CreateTableAsync(new HomeBallsEntryCollection());
        writeElapsed(tableStart);

        static void writeElapsed(DateTime start) =>
            Console.WriteLine(DateTime.Now - start);
    }
}