@inherits HomeBallsComponentBase
@inject IHomeBallsLocalStorageDataSource Data
@inject IHomeBallsLocalStorageEntryCollection Entries
@inject IHomeBallsEntryTableFactory TableFactory
@inject ILogger<EntryTable> Logger

@if (Table == default)
{
    <Loading Size="@LoadingImageSize.GlobalLinkSmall">
        <Message>
            <span>@Message</span>
        </Message>
    </Loading>
}

else
{
    <table class="table-fixed">
        <thead>
            <EntryHeader BallIds="@BallIds" />
        </thead>

        <tbody>
            @foreach (var column in Table.Columns)
            {
                <EntryColumn Column="@column" />
            }
        </tbody>
    </table>
}

@code {
    String? _message = "Downloading data...";

    IHomeBallsEntryTable? Table { get; set; }

    Boolean IsTableFilled { get; set; }

    String? Message
    {
        get => _message;
        set { _message = value; StateHasChanged(); }
    }

    IReadOnlyList<UInt16>? BallIds => Table?.Columns
        .FirstOrDefault()?
        .Select(cell => cell.BallId)?
        .ToList().AsReadOnly();

    protected override void SetServices()
    {
        base.SetServices();
        base.Logger = Logger;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await SetTableAsync();
    }

    protected override async Task OnAfterRenderAsync(Boolean firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender || Table == default || IsTableFilled) return;

        var i = Byte.MinValue;
        var startTime = DateTime.Now;
        foreach (var entry in Entries)
        {
            if (i == Byte.MaxValue)
            {
                await Task.Delay(1);
                i = Byte.MinValue;
            }

            Table!.Add(entry);
            i ++;
        }

        Logger.LogInformation($"Table filled. {DateTime.Now - startTime}");
        IsTableFilled = true;
    }    

    async Task SetTableAsync()
    {
        await Task.Delay(200);
        await DownloadDataAsync();

        Message = "Generating table...";
        var tableStart = DateTime.Now;
        Table = await TableFactory.CreateTableAsync(new HomeBallsEntryCollection());
        Logger.LogDebug($"Generated table. {DateTime.Now - tableStart}");
    }

    async Task DownloadDataAsync()
    {
        var delay = 100;
        await executeAsync(Data.EnsureLoadedAsync(data => data.Items), "Downloaded items.");
        await executeAsync(Data.EnsureLoadedAsync(data => data.PokemonForms), "Downloaded forms.");
        await executeAsync(Data.EnsureLoadedAsync(data => data.PokemonSpecies), "Downloaded species.");
        await executeAsync(Entries.EnsureLoadedAsync(), "Downloaded entries.");

        async Task executeAsync<T>(ValueTask<T> ensureLoadedTask, String message)
        {
            var startTime = DateTime.Now;
            await ensureLoadedTask;
            Logger.LogDebug($"{message} {DateTime.Now - startTime}");
            await Task.Delay(delay);
        }
    }
}