@inherits HomeBallsComponentBase
@inject IHomeBallsLocalStorageDataSource Data
@inject IHomeBallsLocalStorageEntryCollection Entries
@inject IHomeBallsEntryTableFactory TableFactory

@if (Table == default)
{
    <Loading Size="@LoadingImageSize.GlobalLinkSmall">
        <Message>
            <span>@Message</span>
        </Message>
    </Loading>
}

else
{
    <table class="min-w-full bg-white border-separate table-fixed text-dream-black border-spacing-0">
        <thead>
            <EntryHeader BallIds="@BallIds" />
        </thead>

        <tbody>
            @foreach (var column in Table.Columns)
            {
                <EntryColumn Column="@column" />
            }
        </tbody>
    </table>
}

@code {
    String? _message = "Downloading data...";

    IHomeBallsEntryTable? Table { get; set; }

    Boolean IsTableFilled { get; set; }

    String? Message
    {
        get => _message;
        set { _message = value; StateHasChanged(); }
    }

    IReadOnlyList<UInt16>? BallIds => Table?.Columns
        .FirstOrDefault()?
        .Select(cell => cell.BallId)?
        .ToList().AsReadOnly();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Data.DataLoaded += (sender, e) =>
            Logger?.LogInformation($"{e.PropertyName} loaded in {e.ElapsedTime}.");
        Entries.DataLoaded += (sender, e) =>
            Logger?.LogInformation($"{sender?.GetType().GetFullNameNonNull()} loaded in {e.ElapsedTime}.");
        TableFactory.TableCreated += (sender, e) =>
            Logger?.LogInformation($"Table created in {e.ElapsedTime}.");

        await Task.Delay(100);
        Table = await TableFactory.CreateTableAsync();
    }

    protected override async Task OnAfterRenderAsync(Boolean firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender || Table == default || IsTableFilled) return;

        await Task.Delay(100);
        await Data.Legalities.EnsureLoadedAsync();
        await Entries.EnsureLoadedAsync();
        Logger?.LogInformation("Filling table.");

        var startTime = DateTime.Now;
        var legalities = Data.Legalities.OrderBy(entry => entry.SpeciesId).ToList();
        var entries = Entries.OrderBy(entry => entry.SpeciesId).ToList();

        var speciesIds = legalities
            .Select(entry => entry.SpeciesId)
            .GroupBy(entry => entry)
            .Select(group => group.Key)
            .ToList();

        Int32 j = 0, k = 0;
        for (var i = 0; i < speciesIds.Count; i ++)
        {
            var id = speciesIds[i];

            for (; j < legalities.Count; j ++)
            {
                var legality = legalities[j];
                if (legality.SpeciesId != id) break;
                Table.Legalities.Add(legality);
            }

            for (; k < entries.Count; k ++)
            {
                var entry = entries[k];
                if (entry.SpeciesId != id) break;
                Table.Entries.Add(entry);
            }

            await Task.Delay(1);
        }

        @* Int32 i = 0, k = 0;
        var speciesId = legalities[0].SpeciesId;
        for (; i < legalities.Count; i ++)
        {
            var legality = legalities[i];
            if (speciesId != legality.SpeciesId)
            {
                for (; k < entries.Count; k ++)
                {
                    var entry = entries[k];
                    if (entry.SpeciesId > speciesId) break;

                    Table.Entries.Add(entry);
                }
                await Task.Delay(1);
                speciesId = legality.SpeciesId;
            }

            Table.Legalities.Add(legalities[i]);
        }

        for (; k < entries.Count; k ++)
        {
            var entry = entries[k];
            if (entry.SpeciesId <= entry.SpeciesId) Table.Entries.Add(entry);
        } *@

        Logger?.LogInformation($"Table filled after {DateTime.Now - startTime}.");
        await Data.PokemonSpecies.EnsureLoadedAsync();
        IsTableFilled = true;
    }
}