@inherits HomeBallsComponentBase
@inject IHomeBallsLocalStorageDataSource Data
@inject IHomeBallsLocalStorageEntryCollection Entries
@inject IHomeBallsEntryTableFactory TableFactory

@if (Table == default)
{
    <Loading Size="@LoadingImageSize.GlobalLinkSmall">
        <Message>
            <span>@Message</span>
        </Message>
    </Loading>
}

else
{
    <table class="min-w-full bg-white border-separate table-fixed text-dream-black border-spacing-0">
        <thead>
            <EntryHeader BallIds="@BallIds" />
        </thead>

        <tbody>
            @foreach (var column in Table.Columns)
            {
                <EntryColumn Column="@column" />
            }
        </tbody>
    </table>
}

@code {
    String? _message = "Downloading data...";

    IHomeBallsEntryTable? Table { get; set; }

    Boolean IsTableFilled { get; set; }

    String? Message
    {
        get => _message;
        set { _message = value; StateHasChanged(); }
    }

    IReadOnlyList<UInt16>? BallIds => Table?.Columns
        .FirstOrDefault()?
        .Select(cell => cell.BallId)?
        .ToList().AsReadOnly();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        TableFactory.DataLoaded += (sender, e) =>
            Logger?.LogDebug($"{e.PropertyName} loaded in {e.ElapsedTime}.");
        TableFactory.TableCreated += (sender, e) =>
            Logger?.LogDebug($"Table created in {e.ElapsedTime}.");

        await Task.Delay(100);
        var table = await TableFactory.CreateTableAsync(new HomeBallsEntryCollection());
        await Data.PokemonSpecies.EnsureLoadedAsync();
        Table = table;
    }

    protected override async Task OnAfterRenderAsync(Boolean firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender || Table == default || IsTableFilled) return;

        var startTime = DateTime.Now;
        await Entries.EnsureLoadedAsync();
        await Table.AddRangeByBatchAsync(Entries, 200);
        Logger?.LogDebug($"Table filled after {DateTime.Now - startTime}.");
        IsTableFilled = true;
    }
}